<div class="controls-Explorer" on:keyDown="_onExternalKeyDown()">
   <Controls.list:DataContainer
      scope="{{_options}}"
      root="{{_getRoot(_options.root)}}"
      dataLoadCallback="{{_dataLoadCallback}}"
   >
      <ws:content>
         <Controls.dragnDrop:Container on:documentDragStart="_documentDragStart()" on:documentDragEnd="_documentDragEnd()">
            <Controls._explorer.PathController
               scope="{{_options}}"
               header="{{_header}}"
               root="{{content._options.root}}"
               items="{{_breadCrumbsItems}}"
               rootVisible="{{_dragOnBreadCrumbs}}"
               highlighter="{{[_breadCrumbsDragHighlighter]}}"
               on:hoveredItemChanged="_hoveredCrumbChanged()"
               on:arrowActivated="_notifyHandler('arrowActivated')"
               on:arrowClick="_notifyHandler('arrowClick')"
               on:itemClick="_onBreadCrumbsClick()"
            >
               <Controls.tree:TreeControl scope="{{_options}}"
                                          itemPadding="{{_itemPadding}}"
                                          header="{{content.header}}"
                                          name="treeControl"
                                          viewName="{{_viewName}}"
                                          viewModelConstructor="{{_viewModelConstructor}}"
                                          actionAlignment="{{ _viewMode === 'tile' ? 'vertical' : _options.actionAlignment }}"
                                          actionCaptionPosition="{{ _viewMode === 'tile' ? 'none' : _options.actionCaptionPosition }}"
                                          itemTemplate="{{_viewMode==='tile' ? _options.tileItemTemplate : _itemTemplate}}"
                                          disableVirtualScroll="{{_viewMode==='tile'}}"
                                          dragControlId="{{ _dragControlId }}"
                                          canStartDragNDrop="{{ _canStartDragNDrop }}"
                                          markerVisibility="{{ _options.markerVisibility }}"
                                          navigation="{{ _navigation }}"
                                          useNewModel="{{_useNewModel}}"
                                          backgroundStyle="{{ _backgroundStyle }}"
                                          headerVisibility="{{ _headerVisibility }}"
                                          headerInEmptyListVisible="{{ _headerVisibility }}"
                                          root="{{content._options.root}}"
                                          on:itemClick="_onItemClick()"
                                          on:itemMouseDown="_notifyHandler('itemMouseDown')"
                                          on:checkboxClick="_notifyHandler('checkboxClick')"
                                          on:itemSwipe="_notifyHandler('itemSwipe')"
                                          on:beforeBeginEdit="_notifyHandler('beforeBeginEdit')"
                                          on:drawItems="_notifyHandler('drawItems')"
                                          on:afterBeginEdit="_notifyHandler('afterBeginEdit')"
                                          on:beforeEndEdit="_notifyHandler('beforeEndEdit')"
                                          on:afterEndEdit="_notifyHandler('afterEndEdit')"
                                          on:actionClick="_notifyHandler('actionClick')"
                                          on:dragStart="_notifyHandler('dragStart')"
                                          on:dragEnd="_notifyHandler('dragEnd')"
                                          on:hoveredItemChanged="_notifyHandler('hoveredItemChanged')"
                                          on:hoveredCellChanged="_notifyHandler('hoveredCellChanged')"
                                          on:rootChanged="_notifyHandler('rootChanged')"
                                          on:changeDragTarget="_notifyHandler('changeDragTarget')"
                                          on:dragEnter="_notifyHandler('dragEnter')"
                                          on:markedKeyChanged="_notifyHandler('markedKeyChanged')"
                                          on:beforeMarkedKeyChanged="_notifyHandler('beforeMarkedKeyChanged')"
                                          on:selectedKeysChanged="_notifyHandler('selectedKeysChanged')"
                                          on:excludedKeysChanged="_notifyHandler('excludedKeysChanged')"
                                          on:beforeSelectionChanged="_notifyHandler('beforeSelectionChanged')"
                                          on:keyDown="_onExplorerKeyDown()"
                                          on:sortingChanged="_notifyHandler('sortingChanged')"
                                          on:itemExpanded="_notifyHandler('itemExpanded')"
                                          on:itemCollapsed="_notifyHandler('itemCollapsed')"
                                          on:itemExpand="_notifyHandler('itemExpand')"
                                          on:itemCollapse="_notifyHandler('itemCollapse')"
                                          on:afterItemExpand="_notifyHandler('afterItemExpand')"
                                          on:afterItemCollapse="_notifyHandler('afterItemCollapse')"
                                          on:beforeItemExpand="_notifyHandler('beforeItemExpand')"
                                          on:beforeItemCollapse="_notifyHandler('beforeItemCollapse')"
                                          on:expandedItemsChanged="_notifyHandler('expandedItemsChanged')"
                                          on:collapsedItemsChanged="_notifyHandler('collapsedItemsChanged')"
                                          on:editArrowClick="_notifyHandler('editArrowClick')"
                                          on:navigationParamsChanged="_notifyHandler('navigationParamsChanged')"
                                          on:tagClick="_notifyHandler('tagClick')"
                                          on:tagHover="_notifyHandler('tagHover')"
                                          itemsReadyCallback="{{_itemsReadyCallback}}"
                                          itemsSetCallback="{{_itemsSetCallback}}"
                                          _needSetMarkerCallback="{{_needSetMarkerCallback}}"/>
            </Controls._explorer.PathController>
         </Controls.dragnDrop:Container>
      </ws:content>
   </Controls.list:DataContainer>
</div>
